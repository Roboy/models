/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-07-14 21:54:37.514137
/// Generated using solver translationxy2d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
eetrans[0]=((0.287600199439938)+(((0.00199086355903682)*x0))+(((0.00456980153433471)*x1)));
eetrans[1]=((0.594438176472829)+(((0.00457234503228887)*x0))+(((-1.0)*(0.00199817543951395)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 2; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x22000008; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,new_px,px,npx,new_py,py,npy;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1];

new_px=((-0.287552784073427)+(((0.998697985128848)*px))+(((-1.0)*(0.000568918475464847)*py)));
new_py=((-0.594417142530054)+(((0.999750937430909)*py))+(((-1.0)*(0.00056999885002848)*px)));
px = new_px; py = new_py;
{
IkReal verifyeval[1];
verifyeval[0]=((1.0)+(((-1.0)*(40142.193944534)*(px*px)))+(((-1.0)*(40142.193944534)*(py*py))));
if( IKabs(verifyeval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2=px*px*px*px;
IkReal x3=py*py*py*py;
IkReal x4=(px*(py*py*py));
IkReal x5=(py*(px*px*px));
IkReal x6=px*px;
IkReal x7=py*py;
IkReal x8=(x6*x7);
j0eval[0]=(x2+x3+(((2.63585685569512)*x8))+(((4.30620800969722)*x4))+(((-4.30620800969722)*x5)));
j0eval[1]=IKsign(((((3.04141212431075e-5)*x8))+(((4.96876498516961e-5)*x4))+(((1.15386088502468e-5)*x2))+(((1.15386088502468e-5)*x3))+(((-4.96876498516961e-5)*x5))));
j0eval[2]=((((0.5)*(px*px*px*px*px*px*px*px*px*px)))+(((0.5)*(py*py*py*py*py*py*py*py*py*py)))+((x2*(py*py*py*py*py*py)))+((x3*(px*px*px*px*px*px)))+(((-1.5)*x6*(py*py*py*py*py*py*py*py)))+(((-1.5)*x7*(px*px*px*px*px*px*px*px))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x9=px*px*px*px*px;
IkReal x10=py*py*py*py*py;
IkReal x11=(px*(py*py*py*py));
IkReal x12=(py*(px*px*px*px));
IkReal x13=((px*px)*(py*py*py));
IkReal x14=((px*px*px)*(py*py));
j0eval[0]=((((0.0020648690041587)*x10))+(((16.4840362889589)*x14))+(((6.25714101612475)*x9))+(((6.26603277156944)*x11))+(((26.9499934605621)*x13))+(((-26.9424858924372)*x12)));
j0eval[1]=IKsign(((((2.76605234806075e-7)*x10))+(((0.00220816464341114)*x14))+(((0.000839383739400216)*x11))+(((0.00083819261972257)*x9))+(((0.00361016086452291)*x13))+(((-0.00360915516748362)*x12))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x15=px*px*px*px*px;
IkReal x16=py*py*py*py*py;
IkReal x17=(px*(py*py*py*py));
IkReal x18=(py*(px*px*px*px));
IkReal x19=((px*px)*(py*py*py));
IkReal x20=((px*px*px)*(py*py));
j0eval[0]=((((0.00191745669129784)*x16))+(((16.4837805751654)*x20))+(((6.25680317460884)*x15))+(((6.26506014197116)*x17))+(((26.9481500869648)*x19))+(((-26.9411784889083)*x18)));
j0eval[1]=IKsign(((((6.60272211204299e-7)*x16))+(((0.00215451711943168)*x15))+(((0.00215736038891615)*x17))+(((0.00927953925976101)*x19))+(((0.00567615545048202)*x20))+(((-0.00927713860451527)*x18))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
j0array[0]=-1.15936355506883;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.98222909852097;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((0.00457462)*(IKsin(j0))))+(((-1.0)*(0.00199607)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x21=(px*py);
IkReal x22=((0.00292494735860319)*x21);
IkReal x23=px*px;
IkReal x24=((0.00135847936375412)*x23);
IkReal x25=py*py;
IkReal x26=((0.00135847936375412)*x25);
IkReal x27=px*px*px;
IkReal x28=py*py*py;
IkReal x29=(px*x25);
IkReal x30=(py*x23);
IkReal x31=((((1.50532921963156)*x29))+(((0.581415854152635)*x28))+(((-0.0356461562316149)*x30))+(((-0.253480415573048)*x27)));
IkReal x32=((0.00670343358981063)*x21);
IkReal x33=((0.00311338122762071)*x23);
IkReal x34=((0.00311338122762071)*x25);
IkReal x35=((((0.253480415573048)*x28))+(((0.581415854152635)*x27))+(((-0.0356461562316149)*x29))+(((-1.50532921963156)*x30)));
IkReal x36=((0.680577015712936)*x27);
IkReal x37=((0.680577015712936)*x29);
IkReal x38=((1.46535309813944)*x30);
IkReal x39=((0.24675566412466)*pz);
IkReal x40=((((9.79962661011146e-7)*x25))+(((2.10996153002501e-6)*x21))+(((-9.79962661011038e-7)*x23))+((x23*x39))+(((-1.0)*x25*x39))+(((-0.531290608645883)*pz*x21)));
CheckValue<IkReal> x41=IKPowWithIntegerCheck(IKsign((((x31*((x22+x26+(((-1.0)*x24))))))+((x35*((x33+(((-1.0)*x32))+(((-1.0)*x34)))))))),-1);
if(!x41.valid){
continue;
}
CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal((((x31*((x37+x38+(((-1.0)*x36))))))+((x40*((x32+x34+(((-1.0)*x33)))))))),IkReal((((x35*((x36+(((-1.0)*x37))+(((-1.0)*x38))))))+((x40*((x24+(((-1.0)*x22))+(((-1.0)*x26)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x42.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x41.value)))+(x42.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[13];
IkReal x43=px*px*px;
IkReal x44=py*py;
IkReal x45=((0.680577015712936)*x44);
IkReal x46=px*px;
IkReal x47=(py*x46);
IkReal x48=IKsin(j0);
IkReal x49=(px*py);
IkReal x50=((0.00292494735860319)*x49);
IkReal x51=((0.00135847936375412)*x46);
IkReal x52=((0.00135847936375412)*x44);
IkReal x53=IKcos(j0);
IkReal x54=((((0.00311338122762071)*x46))+(((-0.00670343358981063)*x49))+(((-0.00311338122762071)*x44)));
IkReal x55=py*py*py;
IkReal x56=(px*x44);
IkReal x57=((0.680577015712936)*x46);
IkReal x58=(px*py*pz);
IkReal x59=(pz*x46);
IkReal x60=(pz*x44);
IkReal x61=((0.732676549069718)*x44);
IkReal x62=((0.00271695872750824)*x49);
IkReal x63=((0.00146247367930159)*x46);
IkReal x64=((0.00146247367930159)*x44);
IkReal x65=((((0.00335171679490531)*x46))+(((0.00622676245524142)*x49))+(((-0.00335171679490531)*x44)));
IkReal x66=((0.732676549069718)*x46);
IkReal x67=(px*pz);
IkReal x68=(py*pz);
evalcond[0]=((((1.46535309813944)*x47))+(((-0.680577015712936)*x43))+((px*x45))+((x48*((x51+(((-1.0)*x50))+(((-1.0)*x52))))))+((x53*x54)));
evalcond[1]=((((1.46535309813944)*x56))+(((0.680577015712936)*x55))+((x48*x54))+((x53*((x50+x52+(((-1.0)*x51))))))+(((-1.0)*py*x57)));
evalcond[2]=((((3.81244103954154e-7)*x44))+(((8.20858207048404e-7)*x49))+(((0.634268646954753)*x60))+(((1.36564636390819)*x58))+(((-3.81244103954154e-7)*x46))+(((-0.634268646954753)*x59))+((x48*(((((0.0986086116589582)*x55))+(((0.226196152738294)*x43))+(((-0.0138815560628298)*x56))+(((-0.585632454001127)*x47))))))+((x53*(((((0.226196152738294)*x55))+(((0.585632454001127)*x56))+(((-0.0138815560628298)*x47))+(((-0.0986086116589582)*x43)))))));
evalcond[3]=((((9.79962661011146e-7)*x44))+(((2.10996153002501e-6)*x49))+(((0.24675566412466)*x59))+(((-9.79962661011146e-7)*x46))+(((-0.531290608645883)*x58))+(((-0.24675566412466)*x60))+((x48*(((((0.253480415573048)*x55))+(((0.581415854152635)*x43))+(((-0.0356461562316149)*x56))+(((-1.50532921963156)*x47))))))+((x53*(((((1.50532921963156)*x56))+(((0.581415854152635)*x55))+(((-0.0356461562316149)*x47))+(((-0.253480415573048)*x43)))))));
evalcond[4]=((((-0.732676549069718)*x43))+(((-1.36115403142587)*x47))+((px*x61))+((x48*((x62+x63+(((-1.0)*x64))))))+((x53*x65)));
evalcond[5]=((((0.732676549069718)*x55))+(((-1.36115403142587)*x56))+((x48*x65))+((x53*((x64+(((-1.0)*x62))+(((-1.0)*x63))))))+(((-1.0)*py*x66)));
evalcond[6]=((((4.10429103524202e-7)*x44))+(((0.682823181954093)*x60))+(((-7.62488207908417e-7)*x49))+(((-4.10429103524202e-7)*x46))+(((-1.26853729390951)*x58))+(((-0.682823181954093)*x59))+((x48*(((((0.346235007138856)*x47))+(((0.106157298337732)*x55))+(((0.243511921171084)*x43))+(((-0.440729144489001)*x56))))))+((x53*(((((0.243511921171084)*x55))+(((-0.440729144489001)*x47))+(((-0.346235007138856)*x56))+(((-0.106157298337732)*x43)))))));
evalcond[7]=((((1.05498076501251e-6)*x44))+(((0.265645304322941)*x59))+(((0.493511328249319)*x58))+(((-1.95992532202229e-6)*x49))+(((-1.05498076501251e-6)*x46))+(((-0.265645304322941)*x60))+((x48*(((((0.27288484896051)*x55))+(((0.625924402029257)*x43))+(((0.88994685934476)*x47))+(((-1.13288523317535)*x56))))))+((x53*(((((0.625924402029257)*x55))+(((-1.13288523317535)*x47))+(((-0.27288484896051)*x43))+(((-0.88994685934476)*x56)))))));
evalcond[8]=((-5.60177753805959e-7)+((x48*(((((0.332359376699407)*px))+(((-1.0)*(0.144889717669441)*py))))))+((x53*(((((-1.0)*(0.144889717669441)*px))+(((-1.0)*(0.332359376699407)*py))))))+(((-1.0)*(0.931957195601628)*pz)));
evalcond[9]=((-1.43989972976747e-6)+(((0.36256831839402)*pz))+((x48*(((((0.854298397872833)*px))+(((-1.0)*(0.372449274249316)*py))))))+((x53*(((((-1.0)*(0.372449274249316)*px))+(((-1.0)*(0.854298397872833)*py)))))));
evalcond[10]=((((0.00199607)*x48))+(((0.00457462)*x53))+(((-1.0)*(1.0)*px)));
evalcond[11]=((((0.00457462)*x48))+(((-0.00199607)*x53))+(((-1.0)*(1.0)*py)));
evalcond[12]=((2.38711034738686e-12)+(((0.732676549069718)*x49))+(((-0.840288507888109)*x46))+(((-0.159711492175173)*x44))+((x48*(((((1.45842018470786e-5)*x68))+(((6.35823445206593e-6)*x67))))))+((x53*(((((1.45842018470786e-5)*x67))+(((-6.35823445206593e-6)*x68))))))+(((x53*x53)*((x57+(((-1.0)*x45))+(((-1.46535309813944)*x49))))))+(((-1.0)*(0.999999999936719)*(pz*pz)))+((x48*x53*((x66+(((-1.0)*x61))+(((1.36115403142587)*x49)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x69=(px*py);
IkReal x70=((0.00292494735860319)*x69);
IkReal x71=px*px;
IkReal x72=((0.00135847936375412)*x71);
IkReal x73=py*py;
IkReal x74=((0.00135847936375412)*x73);
IkReal x75=px*px*px;
IkReal x76=py*py*py;
IkReal x77=(px*x73);
IkReal x78=(py*x71);
IkReal x79=((((0.226196152738294)*x76))+(((0.585632454001127)*x77))+(((-0.0138815560628298)*x78))+(((-0.0986086116589582)*x75)));
IkReal x80=((0.00670343358981063)*x69);
IkReal x81=((0.00311338122762071)*x71);
IkReal x82=((0.00311338122762071)*x73);
IkReal x83=((((0.0986086116589582)*x76))+(((0.226196152738294)*x75))+(((-0.0138815560628298)*x77))+(((-0.585632454001127)*x78)));
IkReal x84=((0.680577015712936)*x75);
IkReal x85=((0.680577015712936)*x77);
IkReal x86=((1.46535309813944)*x78);
IkReal x87=((0.634268646954753)*pz);
IkReal x88=((((3.81244103954154e-7)*x73))+(((8.20858207048404e-7)*x69))+(((-3.81244103954208e-7)*x71))+((x73*x87))+(((-1.0)*x71*x87))+(((1.36564636390819)*pz*x69)));
CheckValue<IkReal> x89=IKPowWithIntegerCheck(IKsign((((x79*((x70+x74+(((-1.0)*x72))))))+((x83*((x81+(((-1.0)*x80))+(((-1.0)*x82)))))))),-1);
if(!x89.valid){
continue;
}
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal((((x79*((x85+x86+(((-1.0)*x84))))))+((x88*((x80+x82+(((-1.0)*x81)))))))),IkReal((((x83*((x84+(((-1.0)*x85))+(((-1.0)*x86))))))+((x88*((x72+(((-1.0)*x70))+(((-1.0)*x74)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x89.value)))+(x90.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[13];
IkReal x91=px*px*px;
IkReal x92=py*py;
IkReal x93=((0.680577015712936)*x92);
IkReal x94=px*px;
IkReal x95=(py*x94);
IkReal x96=IKsin(j0);
IkReal x97=(px*py);
IkReal x98=((0.00292494735860319)*x97);
IkReal x99=((0.00135847936375412)*x94);
IkReal x100=((0.00135847936375412)*x92);
IkReal x101=IKcos(j0);
IkReal x102=((((0.00311338122762071)*x94))+(((-0.00670343358981063)*x97))+(((-0.00311338122762071)*x92)));
IkReal x103=py*py*py;
IkReal x104=(px*x92);
IkReal x105=((0.680577015712936)*x94);
IkReal x106=(px*py*pz);
IkReal x107=(pz*x94);
IkReal x108=(pz*x92);
IkReal x109=((0.732676549069718)*x92);
IkReal x110=((0.00271695872750824)*x97);
IkReal x111=((0.00146247367930159)*x94);
IkReal x112=((0.00146247367930159)*x92);
IkReal x113=((((0.00335171679490531)*x94))+(((0.00622676245524142)*x97))+(((-0.00335171679490531)*x92)));
IkReal x114=((0.732676549069718)*x94);
IkReal x115=(px*pz);
IkReal x116=(py*pz);
evalcond[0]=((((1.46535309813944)*x95))+(((-0.680577015712936)*x91))+((px*x93))+((x101*x102))+((x96*((x99+(((-1.0)*x100))+(((-1.0)*x98)))))));
evalcond[1]=((((1.46535309813944)*x104))+(((0.680577015712936)*x103))+((x101*((x100+x98+(((-1.0)*x99))))))+((x102*x96))+(((-1.0)*py*x105)));
evalcond[2]=((((3.81244103954154e-7)*x92))+(((8.20858207048404e-7)*x97))+(((0.634268646954753)*x108))+(((1.36564636390819)*x106))+(((-3.81244103954154e-7)*x94))+(((-0.634268646954753)*x107))+((x101*(((((0.226196152738294)*x103))+(((0.585632454001127)*x104))+(((-0.0138815560628298)*x95))+(((-0.0986086116589582)*x91))))))+((x96*(((((0.0986086116589582)*x103))+(((0.226196152738294)*x91))+(((-0.0138815560628298)*x104))+(((-0.585632454001127)*x95)))))));
evalcond[3]=((((9.79962661011146e-7)*x92))+(((2.10996153002501e-6)*x97))+(((0.24675566412466)*x107))+(((-9.79962661011146e-7)*x94))+(((-0.531290608645883)*x106))+(((-0.24675566412466)*x108))+((x101*(((((1.50532921963156)*x104))+(((0.581415854152635)*x103))+(((-0.0356461562316149)*x95))+(((-0.253480415573048)*x91))))))+((x96*(((((0.253480415573048)*x103))+(((0.581415854152635)*x91))+(((-0.0356461562316149)*x104))+(((-1.50532921963156)*x95)))))));
evalcond[4]=((((-0.732676549069718)*x91))+(((-1.36115403142587)*x95))+((px*x109))+((x101*x113))+((x96*((x110+x111+(((-1.0)*x112)))))));
evalcond[5]=((((0.732676549069718)*x103))+(((-1.36115403142587)*x104))+((x101*((x112+(((-1.0)*x110))+(((-1.0)*x111))))))+((x113*x96))+(((-1.0)*py*x114)));
evalcond[6]=((((4.10429103524202e-7)*x92))+(((0.682823181954093)*x108))+(((-7.62488207908417e-7)*x97))+(((-4.10429103524202e-7)*x94))+(((-1.26853729390951)*x106))+(((-0.682823181954093)*x107))+((x101*(((((0.243511921171084)*x103))+(((-0.440729144489001)*x95))+(((-0.346235007138856)*x104))+(((-0.106157298337732)*x91))))))+((x96*(((((0.346235007138856)*x95))+(((0.106157298337732)*x103))+(((0.243511921171084)*x91))+(((-0.440729144489001)*x104)))))));
evalcond[7]=((((1.05498076501251e-6)*x92))+(((0.265645304322941)*x107))+(((0.493511328249319)*x106))+(((-1.95992532202229e-6)*x97))+(((-1.05498076501251e-6)*x94))+(((-0.265645304322941)*x108))+((x101*(((((0.625924402029257)*x103))+(((-1.13288523317535)*x95))+(((-0.27288484896051)*x91))+(((-0.88994685934476)*x104))))))+((x96*(((((0.27288484896051)*x103))+(((0.625924402029257)*x91))+(((0.88994685934476)*x95))+(((-1.13288523317535)*x104)))))));
evalcond[8]=((-5.60177753805959e-7)+((x101*(((((-1.0)*(0.144889717669441)*px))+(((-1.0)*(0.332359376699407)*py))))))+((x96*(((((0.332359376699407)*px))+(((-1.0)*(0.144889717669441)*py))))))+(((-1.0)*(0.931957195601628)*pz)));
evalcond[9]=((-1.43989972976747e-6)+(((0.36256831839402)*pz))+((x101*(((((-1.0)*(0.372449274249316)*px))+(((-1.0)*(0.854298397872833)*py))))))+((x96*(((((0.854298397872833)*px))+(((-1.0)*(0.372449274249316)*py)))))));
evalcond[10]=((((0.00199607)*x96))+(((0.00457462)*x101))+(((-1.0)*(1.0)*px)));
evalcond[11]=((((0.00457462)*x96))+(((-0.00199607)*x101))+(((-1.0)*(1.0)*py)));
evalcond[12]=((2.38711034738686e-12)+(((0.732676549069718)*x97))+(((-0.840288507888109)*x94))+(((-0.159711492175173)*x92))+((x101*(((((1.45842018470786e-5)*x115))+(((-6.35823445206593e-6)*x116))))))+((x96*(((((1.45842018470786e-5)*x116))+(((6.35823445206593e-6)*x115))))))+(((x101*x101)*((x105+(((-1.0)*x93))+(((-1.46535309813944)*x97))))))+(((-1.0)*(0.999999999936719)*(pz*pz)))+((x101*x96*((x114+(((-1.0)*x109))+(((1.36115403142587)*x97)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x117=(px*py);
IkReal x118=((0.00292494735860319)*x117);
IkReal x119=px*px;
IkReal x120=((0.00135847936375412)*x119);
IkReal x121=py*py;
IkReal x122=((0.00135847936375412)*x121);
IkReal x123=(x120+(((-1.0)*x118))+(((-1.0)*x122)));
IkReal x124=((0.00670343358981063)*x117);
IkReal x125=((0.00311338122762071)*x119);
IkReal x126=((0.00311338122762071)*x121);
IkReal x127=(x125+(((-1.0)*x124))+(((-1.0)*x126)));
IkReal x128=(px*x121);
IkReal x129=(py*x119);
IkReal x130=((((1.46535309813944)*x128))+(((0.680577015712936)*(py*py*py)))+(((-0.680577015712936)*x129)));
IkReal x131=((0.680577015712936)*(px*px*px));
IkReal x132=((0.680577015712936)*x128);
IkReal x133=((1.46535309813944)*x129);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign(((x123*x123)+(x127*x127))),-1);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal((((x130*((x124+x126+(((-1.0)*x125))))))+((((x118+x122+(((-1.0)*x120))))*((x132+x133+(((-1.0)*x131)))))))),IkReal((((x123*x130))+((x127*((x131+(((-1.0)*x132))+(((-1.0)*x133)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x134.value)))+(x135.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[13];
IkReal x136=px*px*px;
IkReal x137=py*py;
IkReal x138=((0.680577015712936)*x137);
IkReal x139=px*px;
IkReal x140=(py*x139);
IkReal x141=IKsin(j0);
IkReal x142=(px*py);
IkReal x143=((0.00292494735860319)*x142);
IkReal x144=((0.00135847936375412)*x139);
IkReal x145=((0.00135847936375412)*x137);
IkReal x146=IKcos(j0);
IkReal x147=((((0.00311338122762071)*x139))+(((-0.00670343358981063)*x142))+(((-0.00311338122762071)*x137)));
IkReal x148=py*py*py;
IkReal x149=(px*x137);
IkReal x150=((0.680577015712936)*x139);
IkReal x151=(px*py*pz);
IkReal x152=(pz*x139);
IkReal x153=(pz*x137);
IkReal x154=((0.732676549069718)*x137);
IkReal x155=((0.00271695872750824)*x142);
IkReal x156=((0.00146247367930159)*x139);
IkReal x157=((0.00146247367930159)*x137);
IkReal x158=((((0.00335171679490531)*x139))+(((0.00622676245524142)*x142))+(((-0.00335171679490531)*x137)));
IkReal x159=((0.732676549069718)*x139);
IkReal x160=(px*pz);
IkReal x161=(py*pz);
evalcond[0]=((((1.46535309813944)*x140))+(((-0.680577015712936)*x136))+((px*x138))+((x141*((x144+(((-1.0)*x143))+(((-1.0)*x145))))))+((x146*x147)));
evalcond[1]=((((1.46535309813944)*x149))+(((0.680577015712936)*x148))+((x141*x147))+((x146*((x143+x145+(((-1.0)*x144))))))+(((-1.0)*py*x150)));
evalcond[2]=((((3.81244103954154e-7)*x137))+(((8.20858207048404e-7)*x142))+(((0.634268646954753)*x153))+(((1.36564636390819)*x151))+(((-3.81244103954154e-7)*x139))+(((-0.634268646954753)*x152))+((x141*(((((0.0986086116589582)*x148))+(((0.226196152738294)*x136))+(((-0.0138815560628298)*x149))+(((-0.585632454001127)*x140))))))+((x146*(((((0.226196152738294)*x148))+(((0.585632454001127)*x149))+(((-0.0138815560628298)*x140))+(((-0.0986086116589582)*x136)))))));
evalcond[3]=((((9.79962661011146e-7)*x137))+(((2.10996153002501e-6)*x142))+(((0.24675566412466)*x152))+(((-9.79962661011146e-7)*x139))+(((-0.531290608645883)*x151))+(((-0.24675566412466)*x153))+((x141*(((((0.253480415573048)*x148))+(((0.581415854152635)*x136))+(((-0.0356461562316149)*x149))+(((-1.50532921963156)*x140))))))+((x146*(((((1.50532921963156)*x149))+(((0.581415854152635)*x148))+(((-0.0356461562316149)*x140))+(((-0.253480415573048)*x136)))))));
evalcond[4]=((((-0.732676549069718)*x136))+(((-1.36115403142587)*x140))+((px*x154))+((x141*((x155+x156+(((-1.0)*x157))))))+((x146*x158)));
evalcond[5]=((((0.732676549069718)*x148))+(((-1.36115403142587)*x149))+((x141*x158))+((x146*((x157+(((-1.0)*x155))+(((-1.0)*x156))))))+(((-1.0)*py*x159)));
evalcond[6]=((((4.10429103524202e-7)*x137))+(((0.682823181954093)*x153))+(((-7.62488207908417e-7)*x142))+(((-4.10429103524202e-7)*x139))+(((-1.26853729390951)*x151))+(((-0.682823181954093)*x152))+((x141*(((((0.346235007138856)*x140))+(((0.106157298337732)*x148))+(((0.243511921171084)*x136))+(((-0.440729144489001)*x149))))))+((x146*(((((0.243511921171084)*x148))+(((-0.440729144489001)*x140))+(((-0.346235007138856)*x149))+(((-0.106157298337732)*x136)))))));
evalcond[7]=((((1.05498076501251e-6)*x137))+(((0.265645304322941)*x152))+(((0.493511328249319)*x151))+(((-1.95992532202229e-6)*x142))+(((-1.05498076501251e-6)*x139))+(((-0.265645304322941)*x153))+((x141*(((((0.27288484896051)*x148))+(((0.625924402029257)*x136))+(((0.88994685934476)*x140))+(((-1.13288523317535)*x149))))))+((x146*(((((0.625924402029257)*x148))+(((-1.13288523317535)*x140))+(((-0.27288484896051)*x136))+(((-0.88994685934476)*x149)))))));
evalcond[8]=((-5.60177753805959e-7)+((x141*(((((0.332359376699407)*px))+(((-1.0)*(0.144889717669441)*py))))))+((x146*(((((-1.0)*(0.144889717669441)*px))+(((-1.0)*(0.332359376699407)*py))))))+(((-1.0)*(0.931957195601628)*pz)));
evalcond[9]=((-1.43989972976747e-6)+(((0.36256831839402)*pz))+((x141*(((((0.854298397872833)*px))+(((-1.0)*(0.372449274249316)*py))))))+((x146*(((((-1.0)*(0.372449274249316)*px))+(((-1.0)*(0.854298397872833)*py)))))));
evalcond[10]=((((0.00199607)*x141))+(((0.00457462)*x146))+(((-1.0)*(1.0)*px)));
evalcond[11]=((((0.00457462)*x141))+(((-0.00199607)*x146))+(((-1.0)*(1.0)*py)));
evalcond[12]=((2.38711034738686e-12)+(((0.732676549069718)*x142))+(((-0.840288507888109)*x139))+(((-0.159711492175173)*x137))+((x141*(((((1.45842018470786e-5)*x161))+(((6.35823445206593e-6)*x160))))))+((x146*(((((1.45842018470786e-5)*x160))+(((-6.35823445206593e-6)*x161))))))+(((x146*x146)*((x150+(((-1.0)*x138))+(((-1.46535309813944)*x142))))))+(((-1.0)*(0.999999999936719)*(pz*pz)))+((x141*x146*((x159+(((-1.0)*x154))+(((1.36115403142587)*x142)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
continue; // verifyAllEquations

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - roboy_2_0_left_arm_elbow (ab36ec270baa729feb2c63ae742aa271)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
